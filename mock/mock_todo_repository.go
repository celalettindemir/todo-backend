// Code generated by MockGen. DO NOT EDIT.
// Source: .\repository\todo_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	model "backend/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// AddTodo mocks base method.
func (m *MockTodoRepository) AddTodo(arg0 string) (model.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTodo", arg0)
	ret0, _ := ret[0].(model.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTodo indicates an expected call of AddTodo.
func (mr *MockTodoRepositoryMockRecorder) AddTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTodo", reflect.TypeOf((*MockTodoRepository)(nil).AddTodo), arg0)
}

// FindAllTodos mocks base method.
func (m *MockTodoRepository) FindAllTodos() ([]model.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTodos")
	ret0, _ := ret[0].([]model.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTodos indicates an expected call of FindAllTodos.
func (mr *MockTodoRepositoryMockRecorder) FindAllTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTodos", reflect.TypeOf((*MockTodoRepository)(nil).FindAllTodos))
}
