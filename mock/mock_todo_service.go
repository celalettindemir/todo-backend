// Code generated by MockGen. DO NOT EDIT.
// Source: .\service\todo_service.go

// Package mock is a generated GoMock package.
package mock

import (
	model "backend/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockToDoService is a mock of ToDoService interface.
type MockToDoService struct {
	ctrl     *gomock.Controller
	recorder *MockToDoServiceMockRecorder
}

// MockToDoServiceMockRecorder is the mock recorder for MockToDoService.
type MockToDoServiceMockRecorder struct {
	mock *MockToDoService
}

// NewMockToDoService creates a new mock instance.
func NewMockToDoService(ctrl *gomock.Controller) *MockToDoService {
	mock := &MockToDoService{ctrl: ctrl}
	mock.recorder = &MockToDoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToDoService) EXPECT() *MockToDoServiceMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockToDoService) CreateTodo(arg0 string) (model.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", arg0)
	ret0, _ := ret[0].(model.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockToDoServiceMockRecorder) CreateTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockToDoService)(nil).CreateTodo), arg0)
}

// Todos mocks base method.
func (m *MockToDoService) Todos() ([]model.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Todos")
	ret0, _ := ret[0].([]model.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Todos indicates an expected call of Todos.
func (mr *MockToDoServiceMockRecorder) Todos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Todos", reflect.TypeOf((*MockToDoService)(nil).Todos))
}
